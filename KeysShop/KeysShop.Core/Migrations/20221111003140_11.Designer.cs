// <auto-generated />
using System;
using KeysShop.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KeysShop.Core.Migrations
{
    [DbContext(typeof(KeysShopContext))]
    [Migration("20221111003140_11")]
    partial class _11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KeysShop.Core.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("KeysShop.Core.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KeyId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("KeyId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("KeysShop.Core.Key", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Count")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Frequency")
                        .HasColumnType("int");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsKeyless")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<double?>("Sale")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("KeysShop.Core.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Delivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KeysShop.Core.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("KeyId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("KeyId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("KeysShop.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e76ffa6a-c840-4f6a-967f-5ac5d6863cc6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32c3da5e-9785-4444-9199-9bca461f0102",
                            Email = "manager@keysshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@KEYSSHOP.COM",
                            NormalizedUserName = "MANAGER@KEYSSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK64fMVeVzOxUW9MBvAerWa6qu0ABVUeY4PWqzjXuPV4Qg/OqrUvc57CCd45VwQTpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ea0f341-6a48-48a6-a11a-279ea2271420",
                            TwoFactorEnabled = false,
                            UserName = "manager@keysshop.com"
                        },
                        new
                        {
                            Id = "5b351cad-850e-4e81-a626-c133a4c0f506",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a39f8d96-434b-449b-96b3-24290ac6ffd3",
                            Email = "customer@keysshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@KEYSSHOP.COM",
                            NormalizedUserName = "CUSTOMER@KEYSSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPaIG2DM4u6HcEa68NW6+aavdR8id8OjxOUBVOj/ufuIuae1H22ta9UbBGrl0OF2TA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa1db1fe-be11-4ac0-b023-0e7e91d26cde",
                            TwoFactorEnabled = false,
                            UserName = "customer@keysshop.com"
                        },
                        new
                        {
                            Id = "717f9912-b416-497f-8dc3-efaba25bc9b9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "356b6d4b-d2a0-470d-a1bb-b1f2991b5db5",
                            Email = "admin@keysshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@KEYSSHOP.COM",
                            NormalizedUserName = "ADMIN@KEYSSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMeiUVwGAR4z3eMwAyeUNOvMBBWMffEWpsSN9vHKCFUBNv87gYQOEvlAirydYKa4cQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63150481-7548-4641-8f8f-69b3ca78ae6d",
                            TwoFactorEnabled = false,
                            UserName = "admin@keysshop.com"
                        },
                        new
                        {
                            Id = "655ebfd1-c551-4fe8-bef6-85fd11211f1a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f158b885-3f93-411d-ad8d-d084bff672b1",
                            Email = "consultant@keysshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CONSULTANT@KEYSSHOP.COM",
                            NormalizedUserName = "CONSULTANT@KEYSSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKONHJ4VD+emVQBjWVP/7s8Ge5SdgiF96AEHXTIZZrURG0iHythnonpF0jmR5Y80wQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3427035-d130-4e26-8b22-68648a528827",
                            TwoFactorEnabled = false,
                            UserName = "consultant@keysshop.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "475da668-744e-4852-8f25-9cd3c1d4b57f",
                            ConcurrencyStamp = "30b94e01-5d27-4df7-b0c1-70c483f719ef",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "bd1c9323-eb23-4005-9df3-9183dbf7c864",
                            ConcurrencyStamp = "a475b666-0c5b-45b7-a053-a97dfe42bdf1",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "f9ea0100-7760-4b7c-882a-7eac48efaf8c",
                            ConcurrencyStamp = "b812e2dd-05cf-4685-aed8-87d61f6686e8",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        },
                        new
                        {
                            Id = "ddf5c42a-4b4e-4a8d-954a-280536ff9cbc",
                            ConcurrencyStamp = "fce90928-b96f-4f52-b656-637c20bbd295",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "717f9912-b416-497f-8dc3-efaba25bc9b9",
                            RoleId = "475da668-744e-4852-8f25-9cd3c1d4b57f"
                        },
                        new
                        {
                            UserId = "717f9912-b416-497f-8dc3-efaba25bc9b9",
                            RoleId = "bd1c9323-eb23-4005-9df3-9183dbf7c864"
                        },
                        new
                        {
                            UserId = "717f9912-b416-497f-8dc3-efaba25bc9b9",
                            RoleId = "ddf5c42a-4b4e-4a8d-954a-280536ff9cbc"
                        },
                        new
                        {
                            UserId = "717f9912-b416-497f-8dc3-efaba25bc9b9",
                            RoleId = "f9ea0100-7760-4b7c-882a-7eac48efaf8c"
                        },
                        new
                        {
                            UserId = "e76ffa6a-c840-4f6a-967f-5ac5d6863cc6",
                            RoleId = "bd1c9323-eb23-4005-9df3-9183dbf7c864"
                        },
                        new
                        {
                            UserId = "e76ffa6a-c840-4f6a-967f-5ac5d6863cc6",
                            RoleId = "ddf5c42a-4b4e-4a8d-954a-280536ff9cbc"
                        },
                        new
                        {
                            UserId = "5b351cad-850e-4e81-a626-c133a4c0f506",
                            RoleId = "ddf5c42a-4b4e-4a8d-954a-280536ff9cbc"
                        },
                        new
                        {
                            UserId = "655ebfd1-c551-4fe8-bef6-85fd11211f1a",
                            RoleId = "ddf5c42a-4b4e-4a8d-954a-280536ff9cbc"
                        },
                        new
                        {
                            UserId = "655ebfd1-c551-4fe8-bef6-85fd11211f1a",
                            RoleId = "f9ea0100-7760-4b7c-882a-7eac48efaf8c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KeysShop.Core.Feedback", b =>
                {
                    b.HasOne("KeysShop.Core.Key", null)
                        .WithMany("feedbacks")
                        .HasForeignKey("KeyId");

                    b.HasOne("KeysShop.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KeysShop.Core.Key", b =>
                {
                    b.HasOne("KeysShop.Core.Brand", "Brand")
                        .WithMany("Keys")
                        .HasForeignKey("BrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("KeysShop.Core.OrderDetail", b =>
                {
                    b.HasOne("KeysShop.Core.Key", "Key")
                        .WithMany()
                        .HasForeignKey("KeyId");

                    b.HasOne("KeysShop.Core.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.Navigation("Key");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KeysShop.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KeysShop.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeysShop.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KeysShop.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeysShop.Core.Brand", b =>
                {
                    b.Navigation("Keys");
                });

            modelBuilder.Entity("KeysShop.Core.Key", b =>
                {
                    b.Navigation("feedbacks");
                });

            modelBuilder.Entity("KeysShop.Core.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
