// <auto-generated />
using System;
using KeysShop.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KeysShop.Core.Migrations
{
    [DbContext(typeof(KeysShopContext))]
    [Migration("20221110155442_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KeysShop.Core.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("KeysShop.Core.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KeyId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("KeyId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("KeysShop.Core.Key", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Count")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Frequency")
                        .HasColumnType("int");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsKeyless")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<double?>("Sale")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("KeysShop.Core.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Delivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KeysShop.Core.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("KeyId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("KeyId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("KeysShop.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2242398a-c62a-4fb6-a66a-a64b86569876",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44ee5536-cbb6-4615-812d-a5991f31c18c",
                            Email = "manager@keysshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@KEYSSHOP.COM",
                            NormalizedUserName = "MANAGER@KEYSSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJtQRy4cMQVfDsPMyxCNZ5bfUmCswurJgXsaCA0IzYPGbYTE2i5PudaTOFwbwWt6ig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6db27e5-b4eb-4217-84d9-25a4d539255f",
                            TwoFactorEnabled = false,
                            UserName = "manager@keysshop.com"
                        },
                        new
                        {
                            Id = "1283fa48-21c0-4876-ade1-631783dde9bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "394dc966-c0ec-48e4-b7b2-23e3300bb4be",
                            Email = "customer@keysshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@KEYSSHOP.COM",
                            NormalizedUserName = "CUSTOMER@KEYSSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK3W1gPZ69sCeUfq92/CSzebGfxSCchsjJItQw6cfVcZO9JRUXYVXYqb/kLGP4AJlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90000b58-0e91-46cf-861c-fe4e0cf74e22",
                            TwoFactorEnabled = false,
                            UserName = "customer@keysshop.com"
                        },
                        new
                        {
                            Id = "e137cad6-156a-4160-b2e7-f7bd5ec5a779",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47cc12d5-f77b-447a-977d-764803f9650b",
                            Email = "admin@keysshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@KEYSSHOP.COM",
                            NormalizedUserName = "ADMIN@KEYSSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAOAuwjGudATRQNMUWPnBjm+8ye9Z9flJeah1bAm2+qL8IYOOJQidZa63VKAXVAVUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81c93193-2a61-45a7-a4f2-94196c66d54a",
                            TwoFactorEnabled = false,
                            UserName = "admin@keysshop.com"
                        },
                        new
                        {
                            Id = "5b05eda6-eab9-436c-afb7-af78fbd14b9e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d15a9ed3-953b-4b83-893a-3e14e9a3b8ed",
                            Email = "consultant@keysshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CONSULTANT@KEYSSHOP.COM",
                            NormalizedUserName = "CONSULTANT@KEYSSHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGFH50TWDec1LqQWqipA+Nf6HD83jCNVps2I5CvLvK+GZDFY3GLdWXM5M9Rscrc/6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b411ac41-3c90-4fc3-85c3-3436d9514cf2",
                            TwoFactorEnabled = false,
                            UserName = "consultant@keysshop.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5c3222ad-8240-4940-acb7-b2a74433e15b",
                            ConcurrencyStamp = "0523fe3e-111b-4405-b116-e186e09fd5e5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8dc6830c-bb38-44d0-ab4a-3965417bfd7b",
                            ConcurrencyStamp = "e091d7b8-cf4e-48c7-a5a7-eb850dff88b5",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "d30bb507-e6c9-41bd-bdfe-2a4490721dd2",
                            ConcurrencyStamp = "9e6cefc9-f083-40cf-ae78-96fa663c4946",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        },
                        new
                        {
                            Id = "1338f983-31ab-4099-b7d8-87c416740af8",
                            ConcurrencyStamp = "d3d74760-bb15-446b-989d-d29433a84684",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e137cad6-156a-4160-b2e7-f7bd5ec5a779",
                            RoleId = "5c3222ad-8240-4940-acb7-b2a74433e15b"
                        },
                        new
                        {
                            UserId = "e137cad6-156a-4160-b2e7-f7bd5ec5a779",
                            RoleId = "8dc6830c-bb38-44d0-ab4a-3965417bfd7b"
                        },
                        new
                        {
                            UserId = "e137cad6-156a-4160-b2e7-f7bd5ec5a779",
                            RoleId = "1338f983-31ab-4099-b7d8-87c416740af8"
                        },
                        new
                        {
                            UserId = "e137cad6-156a-4160-b2e7-f7bd5ec5a779",
                            RoleId = "d30bb507-e6c9-41bd-bdfe-2a4490721dd2"
                        },
                        new
                        {
                            UserId = "2242398a-c62a-4fb6-a66a-a64b86569876",
                            RoleId = "8dc6830c-bb38-44d0-ab4a-3965417bfd7b"
                        },
                        new
                        {
                            UserId = "2242398a-c62a-4fb6-a66a-a64b86569876",
                            RoleId = "1338f983-31ab-4099-b7d8-87c416740af8"
                        },
                        new
                        {
                            UserId = "1283fa48-21c0-4876-ade1-631783dde9bc",
                            RoleId = "1338f983-31ab-4099-b7d8-87c416740af8"
                        },
                        new
                        {
                            UserId = "5b05eda6-eab9-436c-afb7-af78fbd14b9e",
                            RoleId = "1338f983-31ab-4099-b7d8-87c416740af8"
                        },
                        new
                        {
                            UserId = "5b05eda6-eab9-436c-afb7-af78fbd14b9e",
                            RoleId = "d30bb507-e6c9-41bd-bdfe-2a4490721dd2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KeysShop.Core.Feedback", b =>
                {
                    b.HasOne("KeysShop.Core.Key", null)
                        .WithMany("feedbacks")
                        .HasForeignKey("KeyId");

                    b.HasOne("KeysShop.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KeysShop.Core.Key", b =>
                {
                    b.HasOne("KeysShop.Core.Brand", "Brand")
                        .WithMany("Keys")
                        .HasForeignKey("BrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("KeysShop.Core.OrderDetail", b =>
                {
                    b.HasOne("KeysShop.Core.Key", "Key")
                        .WithMany()
                        .HasForeignKey("KeyId");

                    b.HasOne("KeysShop.Core.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.Navigation("Key");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KeysShop.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KeysShop.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeysShop.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KeysShop.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeysShop.Core.Brand", b =>
                {
                    b.Navigation("Keys");
                });

            modelBuilder.Entity("KeysShop.Core.Key", b =>
                {
                    b.Navigation("feedbacks");
                });

            modelBuilder.Entity("KeysShop.Core.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
